apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    component: db
  name: postgresql
  namespace: default
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      component: db
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        component: db
    spec:
      containers:
      - image: "{{ .Values.postgres.image.repository }}:{{ .Values.postgres.image.tag }}"
        imagePullPolicy: Always
        name: postgres
        ports:
        - containerPort: 8181
          protocol: TCP
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        env:
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: drupal-db
                key: password
          - name: POSTGRES_USER
            value: {{ .Values.drupal.dbUser }}
          - name: POSTGRES_DB
            value: {{ .Values.drupal.dbName }}
          - name: POSTGRES_INITDB_ARGS
            value: -E UTF-8
        volumeMounts:
        - mountPath: '/var/lib/postgresql/data'
          name: data
      {{ if .Values.postgres.image.pullSecret -}}
      imagePullSecrets:
       - name: {{ .Values.postgres.image.pullSecret}}
      {{- end }}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: postgres-data-claim
status: {}
