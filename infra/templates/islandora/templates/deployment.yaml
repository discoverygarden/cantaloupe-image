# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: {{ include "islandora.fullname" . }}
#   labels:
#     {{- include "islandora.labels" . | nindent 4 }}
# spec:
# {{- if not .Values.autoscaling.enabled }}
#   replicas: {{ .Values.replicaCount }}
# {{- end }}
#   selector:
#     matchLabels:
#       {{- include "islandora.selectorLabels" . | nindent 6 }}
#   template:
#     metadata:
#     {{- with .Values.podAnnotations }}
#       annotations:
#         {{- toYaml . | nindent 8 }}
#     {{- end }}
#       labels:
#         {{- include "islandora.selectorLabels" . | nindent 8 }}
#     spec:
#       {{- with .Values.imagePullSecrets }}
#       imagePullSecrets:
#         {{- toYaml . | nindent 8 }}
#       {{- end }}
#       serviceAccountName: {{ include "islandora.serviceAccountName" . }}
#       securityContext:
#         {{- toYaml .Values.podSecurityContext | nindent 8 }}
#       containers:
#         - name: {{ .Chart.Name }}
#           securityContext:
#             {{- toYaml .Values.securityContext | nindent 12 }}
#           image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
#           imagePullPolicy: {{ .Values.image.pullPolicy }}
#           ports:
#             - name: http
#               containerPort: 80
#               protocol: TCP
#           livenessProbe:
#             httpGet:
#               path: /
#               port: http
#           readinessProbe:
#             httpGet:
#               path: /
#               port: http
#           resources:
#             {{- toYaml .Values.resources | nindent 12 }}
#       {{- with .Values.nodeSelector }}
#       nodeSelector:
#         {{- toYaml . | nindent 8 }}
#       {{- end }}
#       {{- with .Values.affinity }}
#       affinity:
#         {{- toYaml . | nindent 8 }}
#       {{- end }}
#       {{- with .Values.tolerations }}
#       tolerations:
#         {{- toYaml . | nindent 8 }}
#       {{- end }}
# ---
## ACTIVEMQ

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    component: activemq
  name: activemq
  namespace: default
  resourceVersion: "15123"
  selfLink: /apis/apps/v1/namespaces/default/deployments/drupal
  uid: d1a6cc68-a50d-4306-9d5a-c19d6d3eb3f7
spec:
  progressDeadlineSeconds: 600
  replicas: {{ .Values.activemq.replicas }}
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      component: activemq
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        component: activemq
    spec:
      containers:
      - image: "{{ .Values.activemq.image.repository }}:{{ .Values.activemq.image.tag }}"
        imagePullPolicy: Always
        name: activemq
        ports: 
        - containerPort: 8161
          protocol: TCP
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
status: {}

---

## ALPACA

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    component: alpaca
  name: alpaca
  namespace: default
  resourceVersion: "15123"
  selfLink: /apis/apps/v1/namespaces/default/deployments/drupal
  uid: d1a6cc68-a50d-4306-9d5a-c19d6d3eb3f7
spec:
  progressDeadlineSeconds: 600
  replicas: {{ .Values.alpaca.replicas }}
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      component: alpaca
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        component: alpaca
    spec:
      containers:
      - image: "{{ .Values.alpaca.image.repository }}:{{ .Values.alpaca.image.tag }}"
        imagePullPolicy: Always
        name: alpaca
        ports: 
        - containerPort: 8181
          protocol: TCP
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        env:
          - name: ACTIVEMQ_HOST
            value: {{ .Values.alpaca.activemq.host }}
          - name: ACTIVEMQ_JMS_PORT
            value: 61616
          - name: HOMARUS_URL
            value: 'http://crayfish/homarus/convert'
          - name: HOUDINI_URL
            value: 'http://crayfish/houdini/convert'
          - name: HYPERCUBE_URL
            value: 'http://crayfish/hypercube'
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
status: {}

---

## DRUPAL

apiVersion: apps/v1
kind:  
metadata:
  labels:
    component: drupal
  name: drupal
  namespace: default
  resourceVersion: "15123"
  selfLink: /apis/apps/v1/namespaces/default/deployments/drupal
  uid: d1a6cc68-a50d-4306-9d5a-c19d6d3eb3f7
spec:
  progressDeadlineSeconds: 600
  replicas: {{ .Values.drupal.replicas }}
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      component: drupal
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        component: drupal
    spec:
      containers:
      - image: "{{ .Values.drupal.image.repository }}:{{ .Values.drupal.image.tag }}"
        imagePullPolicy: Always
        name: drupal
        ports: 
        - containerPort: 80
          protocol: TCP
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        env:
          - name: DRUPAL_DB_NAME
            value: {{ .Values.drupal.db.name }}
          - name: DRUPAL_DB_USER
            value: {{ .Values.drupal.db.user }}
          - name: DRUPAL_TRUSTED_HOSTS
            value: {{ .Values.drupal.trust.hosts }}
          - name: POSTGRES_HOST
            value: {{ .Values.drupal.postgres.host }}
          - name: MEMCACHED_HOST
            value: {{ .Values.drupal.memcached.host }}
          - name: MEMCACHED_PORT
            value: 11211
          - name: SOLR_HOST
            value: {{ .Values.drupal.solr.host }}
          - name: SOLR_USERNAME
            value: {{ .Values.drupal.solr.user }}
          - name: JWT_KEY_TYPE
            value: RS256
          ## TODO: Create a secret for the below key and mount it here to the pod as volume
          - name: JWT_KEY_FILE
            value: ${JWT_KEY_FILE}
          - name: IIIF_URL
            value: ${IIIF_URL}
          - name: IIIF_INGRESS_URL
            value: ${IIIF_INGRESS_URL}
          - name: ACTIVEMQ_HOST
            value: {{ .Values.drupal.activemq.host }}
          - name: ACTIVEMQ_STOMP_PORT
            value: 61613
          - name: CONFIG_SPLITS
            value: {{ .Values.drupal.activemq.config_splits }}
          - name: CLAMAV_HOST
            value: {{ .Values.drupal.clamav.host }}
          - name: CLAMAV_PORT
            value: 3310
        envFrom:
          - name: DRUPAL_DB_PASSWORD 
            valueFrom:
              secretKeyRef:
                name: drupal_db 
                key: drupal_db_pwd
          - name: SOLR_PASSWORD
             valueFrom:
              secretKeyRef:
                name: solr_password 
                key: solr_pwd
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
status: {}

---

## MEMCACHE

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    component: memcache
  name: memcache
  namespace: default
  resourceVersion: "15123"
  selfLink: /apis/apps/v1/namespaces/default/deployments/drupal
  uid: d1a6cc68-a50d-4306-9d5a-c19d6d3eb3f7
spec:
  progressDeadlineSeconds: 600
  replicas: {{ .Values.memcache.replicas }}
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      component: memcache
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        component: memcache
    spec:
      containers:
      - image: "{{ .Values.memcache.image.repository }}:{{ .Values.memcache.image.tag }}"
        imagePullPolicy: Always
        name: memcache
        ports: 
        - containerPort: 11211
          protocol: TCP
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
status: {}

---

## CRAYFISH

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    component: crayfish
  name: crayfish
  namespace: default
  resourceVersion: "15123"
  selfLink: /apis/apps/v1/namespaces/default/deployments/drupal
  uid: d1a6cc68-a50d-4306-9d5a-c19d6d3eb3f7
spec:
  progressDeadlineSeconds: 600
  replicas: {{ .Values.crayfish.replicas }}
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      component: crayfish
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        component: crayfish
    spec:
      containers:
      - image: "{{ .Values.crayfish.image.repository }}:{{ .Values.crayfish.image.tag }}"
        imagePullPolicy: Always
        name: crayfish
        ports: 
        - containerPort: 8000
          protocol: TCP
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
status: {}

---
## SOLR

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    component: solr
  name: solr
  namespace: default
  resourceVersion: "15123"
  selfLink: /apis/apps/v1/namespaces/default/deployments/drupal
  uid: d1a6cc68-a50d-4306-9d5a-c19d6d3eb3f7
spec:
  progressDeadlineSeconds: 600
  replicas: {{ .Values.solr.replicas }}
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      component: solr
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        component: solr
    spec:
      containers:
      - image: "{{ .Values.solr.image.repository }}:{{ .Values.solr.image.tag }}"
        imagePullPolicy: Always
        name: solr
        ports: 
        - containerPort: 8983
          protocol: TCP
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
status: {}

---
## CANTALOUPE

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    component: cantaloupe
  name: cantaloupe
  namespace: default
  resourceVersion: "15123"
  selfLink: /apis/apps/v1/namespaces/default/deployments/drupal
  uid: d1a6cc68-a50d-4306-9d5a-c19d6d3eb3f7
spec:
  progressDeadlineSeconds: 600
  replicas: {{ .Values.cantaloupe.replicas }}
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      component: cantaloupe
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        component: cantaloupe
    spec:
      containers:
      - image: "{{ .Values.cantaloupe.image.repository }}:{{ .Values.cantaloupe.image.tag }}"
        imagePullPolicy: Always
        name: cantaloupe
        ports: 
        - containerPort: 80
          protocol: TCP
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
status: {}
---
