## ACTIVEMQ

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    component: activemq
  name: activemq
  namespace: default
spec:
  progressDeadlineSeconds: 600
  replicas: {{ .Values.activemq.replicas }}
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      component: activemq
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        component: activemq
    spec:
      containers:
      - image: "{{ .Values.activemq.image.repository }}:{{ .Values.activemq.image.tag }}"
        imagePullPolicy: Always
        name: activemq
        ports: 
        - containerPort: 8161
          protocol: TCP
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      {{ if .Values.activemq.image.pullSecret -}}
      imagePullSecrets:
       - name: {{ .Values.activemq.image.pullSecret}}
      {{- end }}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
status: {}

---

## ALPACA

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    component: alpaca
  name: alpaca
  namespace: default
spec:
  progressDeadlineSeconds: 600
  replicas: {{ .Values.alpaca.replicas }}
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      component: alpaca
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        component: alpaca
    spec:
      containers:
      - image: "{{ .Values.alpaca.image.repository }}:{{ .Values.alpaca.image.tag }}"
        imagePullPolicy: Always
        name: alpaca
        ports: 
        - containerPort: 8181
          protocol: TCP
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        env:
          - name: ACTIVEMQ_HOST
            value: svc-activemq.{{ .Release.Namespace }}.svc.cluster.local
          - name: ACTIVEMQ_JMS_PORT
            value: '61616'
          - name: HOMARUS_URL
            value: http://svc-crayfish.{{ .Release.Namespace }}.svc.cluster.local/homarus/convert
          - name: HOUDINI_URL
            value: 'http://svc-crayfish.{{ .Release.Namespace }}.svc.cluster.local/houdini/convert'
          - name: HYPERCUBE_URL
            value: 'http://svc-crayfish.{{ .Release.Namespace }}.svc.cluster.local/hypercube'
      {{ if .Values.alpaca.image.pullSecret -}}
      imagePullSecrets:
       - name: {{ .Values.alpaca.image.pullSecret}}
      {{- end }}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
status: {}

---
## CLAMAV

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    component: clamav
  name: clamav
  namespace: default
spec:
  progressDeadlineSeconds: 600
  replicas: {{ .Values.clamav.replicas }}
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      component: clamav
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        component: clamav
    spec:
      containers:
      - image: "{{ .Values.clamav.image.repository }}:{{ .Values.clamav.image.tag }}"
        imagePullPolicy: Always
        name: clamav
        ports:
        - containerPort: 3310
          protocol: TCP
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      {{ if .Values.clamav.image.pullSecret -}}
      imagePullSecrets:
       - name: {{ .Values.clamav.image.pullSecret}}
      {{- end }}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
status: {}

---
## DB

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    component: db
  name: postgresql
  namespace: default
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      component: db
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        component: db
    spec:
      containers:
      - image: "{{ .Values.postgres.image.repository }}:{{ .Values.postgres.image.tag }}"
        imagePullPolicy: Always
        name: postgres
        ports:
        - containerPort: 8181
          protocol: TCP
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        env:
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: drupal-db
                key: password
          - name: POSTGRES_USER
            value: {{ .Values.drupal.dbUser }}
          - name: POSTGRES_DB
            value: {{ .Values.drupal.dbName }}
          - name: POSTGRES_INITDB_ARGS
            value: -E UTF-8
      {{ if .Values.postgres.image.pullSecret -}}
      imagePullSecrets:
       - name: {{ .Values.postgres.image.pullSecret}}
      {{- end }}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
status: {}

---

## DRUPAL

apiVersion: apps/v1
kind:  Deployment
metadata:
  labels:
    component: drupal
  name: drupal
  namespace: default
spec:
  progressDeadlineSeconds: 600
  replicas: {{ .Values.drupal.replicas }}
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      component: drupal
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        component: drupal
    spec:
      containers:
      - image: "{{ .Values.drupal.image.repository }}:{{ .Values.drupal.image.tag }}"
        imagePullPolicy: Always
        name: drupal
        ports: 
        - containerPort: 80
          protocol: TCP
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        env:
          - name: DRUPAL_DB_NAME
            value: {{ .Values.drupal.dbName }}
          - name: DRUPAL_DB_USER
            value: {{ .Values.drupal.dbUser }}
          - name: DRUPAL_TRUSTED_HOSTS
            value: {{ .Values.drupal.trustedHosts | quote }}
          - name: POSTGRES_HOST
            value: svc-db.{{ .Release.Namespace }}.svc.cluster.local
          - name: MEMCACHED_HOST
            value: svc-memcached.{{ .Release.Namespace }}.svc.cluster.local
          - name: MEMCACHED_PORT
            value: '11211'
          - name: SOLR_HOST
            value: svc-solr.{{ .Release.Namespace }}.svc.cluster.local
          - name: SOLR_USERNAME
            value: {{ .Values.drupal.solrUser }}
          - name: JWT_KEY_TYPE
            value: RS256
          - name: JWT_KEY_FILE
            value: /run/secrets/crayfish/default.key
          - name: IIIF_URL
            value: http://svc-cantaloupe.{{ .Release.Namespace }}.svc.cluster.local:8080/cantaloupe/iiif/2
          - name: IIIF_INGRESS_URL
            value: http://{{ .Values.ingress.host }}:{{ .Values.ingress.port }}/iiif/2
          - name: ACTIVEMQ_HOST
            value: svc-activemq.{{ .Release.Namespace }}.svc.cluster.local
          - name: ACTIVEMQ_STOMP_PORT
            value: '61613'
          - name: CONFIG_SPLITS
            value: {{ .Values.drupal.config_splits | quote }}
          - name: CLAMAV_HOST
            value: svc-clamav.{{ .Release.Namespace }}.svc.cluster.local
          - name: CLAMAV_PORT
            value: '3310'
          - name: DRUPAL_DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: drupal-db
                key: password
          - name: SOLR_PASSWORD
            valueFrom:
              secretKeyRef:
                name: solr-auth
                key: password
        volumeMounts:
        - name: crayfish-key
          mountPath: /run/secrets/crayfish
      {{ if .Values.drupal.image.pullSecret -}}
      imagePullSecrets:
       - name: {{ .Values.drupal.image.pullSecret}}
      {{- end }}
      volumes:
      - name: crayfish-key
        secret:
          secretName: crayfish-key
          items:
          - key: private
            path: default.key
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
status: {}

---

## MEMCACHE

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    component: memcache
  name: memcache
  namespace: default
spec:
  progressDeadlineSeconds: 600
  replicas: {{ .Values.memcache.replicas }}
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      component: memcache
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        component: memcache
    spec:
      containers:
      - image: "{{ .Values.memcache.image.repository }}:{{ .Values.memcache.image.tag }}"
        imagePullPolicy: Always
        name: memcache
        ports: 
        - containerPort: 11211
          protocol: TCP
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      {{ if .Values.memcache.image.pullSecret -}}
      imagePullSecrets:
       - name: {{ .Values.memcache.image.pullSecret}}
      {{- end }}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
status: {}

---

## CRAYFISH

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    component: crayfish
  name: crayfish
  namespace: default
spec:
  progressDeadlineSeconds: 600
  replicas: {{ .Values.crayfish.replicas }}
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      component: crayfish
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        component: crayfish
    spec:
      containers:
      - image: "{{ .Values.crayfish.image.repository }}:{{ .Values.crayfish.image.tag }}"
        imagePullPolicy: Always
        name: crayfish
        ports: 
        - containerPort: 8000
          protocol: TCP
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - name: crayfish-key
          mountPath: /run/secrets/keys
        - name: crayfish-syn-settings
          mountPath: /opt/www/crayfish/syn-settings.xml
          subPath: syn-settings.xml
      {{ if .Values.crayfish.image.pullSecret -}}
      imagePullSecrets:
       - name: {{ .Values.crayfish.image.pullSecret}}
      {{- end }}
      volumes:
      - name: crayfish-key
        secret:
          secretName: crayfish-key
          items:
          - key: public
            path: default.pub
      - name: crayfish-syn-settings
        configMap:
          name: crayfish-syn-settings
          items:
          - key: syn-settings
            path: syn-settings.xml
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
status: {}

---
## SOLR

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    component: solr
  name: solr
  namespace: default
spec:
  progressDeadlineSeconds: 600
  replicas: {{ .Values.solr.replicas }}
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      component: solr
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        component: solr
    spec:
      containers:
      - image: "{{ .Values.solr.image.repository }}:{{ .Values.solr.image.tag }}"
        imagePullPolicy: Always
        name: solr
        ports: 
        - containerPort: 8983
          protocol: TCP
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      {{ if .Values.solr.image.pullSecret -}}
      imagePullSecrets:
       - name: {{ .Values.solr.image.pullSecret}}
      {{- end }}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
status: {}

---
## CANTALOUPE

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    component: cantaloupe
  name: cantaloupe
  namespace: default
spec:
  progressDeadlineSeconds: 600
  replicas: {{ .Values.cantaloupe.replicas }}
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      component: cantaloupe
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        component: cantaloupe
    spec:
      containers:
      - image: "{{ .Values.cantaloupe.image.repository }}:{{ .Values.cantaloupe.image.tag }}"
        imagePullPolicy: Always
        name: cantaloupe
        ports: 
        - containerPort: 80
          protocol: TCP
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - name: cantaloupe-info
          mountPath: /opt/cantaloupe_configs/info.yaml
          subPath: info.yaml
      {{ if .Values.cantaloupe.image.pullSecret -}}
      imagePullSecrets:
       - name: {{ .Values.cantaloupe.image.pullSecret}}
      {{- end }}
      volumes:
      - name: cantaloupe-info
        configMap:
          name: cantaloupe-info-{{ .Release.Revision }}
          items:
          - key: info
            path: info.yaml
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
status: {}
---
